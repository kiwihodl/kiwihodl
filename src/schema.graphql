type PlatformLinks {
  Spotify: String
  ApplePodcasts: String
  Sphinx: String
  Fountain: String
  Breez: String
}

type Platforms {
  Fiat: PlatformLinks
  Bitcoin: PlatformLinks
}

type Content {
  ContentTitle: String
  ContentParagraph: String
  Watch: Platforms
  Listen: Platforms
  Read: Platforms
}

type User {
  ID: ID!
  User: String
  Category: String
  Full_Name: String
  Email: String
  Verified: Boolean
  _21Client: Boolean
  ThumbNail: String
  ThumbNailAltDescription: String
  Content: Content
  Donate: String
  Contact: String
}

type AuthPayload {
  token: String!
}

input ContentInput {
  ContentTitle: String
  ContentParagraph: String
  Watch: Platforms
  Listen: Platforms
  Read: Platforms
}

type Mutation {
  loginUser(email: String!, password: String!): AuthPayload!
  signup(email: String!, password: String!): AuthPayload!
  createContent(input: ContentInput!): User!
  editContent(id: ID!, input: ContentInput!): User!
}

type Query {
  users: [User]
}